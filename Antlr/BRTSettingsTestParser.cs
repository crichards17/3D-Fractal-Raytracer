//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\crich\Documents\Coding\Fractals\BoxRayTracer\Antlr\BRTSettingsTest.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class BRTSettingsTestParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, COLON=6, SEMICOLON=7, INT=8, DOUBLE=9, 
		BOOL=10, STRING=11;
	public const int
		RULE_file = 0, RULE_setting = 1, RULE_key = 2, RULE_value = 3, RULE_primitive = 4, 
		RULE_array = 5, RULE_vector = 6, RULE_list = 7;
	public static readonly string[] ruleNames = {
		"file", "setting", "key", "value", "primitive", "array", "vector", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'<'", "'>'", "','", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "COLON", "SEMICOLON", "INT", "DOUBLE", 
		"BOOL", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BRTSettingsTest.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BRTSettingsTestParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BRTSettingsTestParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BRTSettingsTestParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BRTSettingsTestParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SettingContext[] setting() {
			return GetRuleContexts<SettingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SettingContext setting(int i) {
			return GetRuleContext<SettingContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16;
				setting();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SettingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BRTSettingsTestParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(BRTSettingsTestParser.SEMICOLON, 0); }
		public SettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setting; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SettingContext setting() {
		SettingContext _localctx = new SettingContext(Context, State);
		EnterRule(_localctx, 2, RULE_setting);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			key();
			State = 24;
			Match(COLON);
			State = 25;
			value();
			State = 26;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BRTSettingsTestParser.STRING, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 4, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveContext primitive() {
			return GetRuleContext<PrimitiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorContext vector() {
			return GetRuleContext<VectorContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
			case DOUBLE:
			case BOOL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				primitive();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				array();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32;
				vector();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BRTSettingsTestParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(BRTSettingsTestParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(BRTSettingsTestParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BRTSettingsTestParser.STRING, 0); }
		public PrimitiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveContext primitive() {
		PrimitiveContext _localctx = new PrimitiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_primitive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << DOUBLE) | (1L << BOOL) | (1L << STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 10, RULE_array);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(T__0);
			State = 38;
			list();
			State = 39;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public VectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorContext vector() {
		VectorContext _localctx = new VectorContext(Context, State);
		EnterRule(_localctx, 12, RULE_vector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__2);
			State = 42;
			list();
			State = 43;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBRTSettingsTestVisitor<TResult> typedVisitor = visitor as IBRTSettingsTestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 14, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			value();
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 46;
				Match(T__4);
				State = 47;
				value();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\x38', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '$', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x33', 
		'\n', '\t', '\f', '\t', '\xE', '\t', '\x36', '\v', '\t', '\x3', '\t', 
		'\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x2', '\x3', '\x3', '\x2', '\n', '\r', '\x2', '\x33', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', '#', '\x3', '\x2', '\x2', 
		'\x2', '\n', '%', '\x3', '\x2', '\x2', '\x2', '\f', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '+', '\x3', '\x2', '\x2', '\x2', '\x10', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x1B', '\a', 
		'\b', '\x2', '\x2', '\x1B', '\x1C', '\x5', '\b', '\x5', '\x2', '\x1C', 
		'\x1D', '\a', '\t', '\x2', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\a', '\r', '\x2', '\x2', '\x1F', '\a', '\x3', 
		'\x2', '\x2', '\x2', ' ', '$', '\x5', '\n', '\x6', '\x2', '!', '$', '\x5', 
		'\f', '\a', '\x2', '\"', '$', '\x5', '\xE', '\b', '\x2', '#', ' ', '\x3', 
		'\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', '\"', 
		'\x3', '\x2', '\x2', '\x2', '$', '\t', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\t', '\x2', '\x2', '\x2', '&', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\'', '(', '\a', '\x3', '\x2', '\x2', '(', ')', '\x5', '\x10', '\t', '\x2', 
		')', '*', '\a', '\x4', '\x2', '\x2', '*', '\r', '\x3', '\x2', '\x2', '\x2', 
		'+', ',', '\a', '\x5', '\x2', '\x2', ',', '-', '\x5', '\x10', '\t', '\x2', 
		'-', '.', '\a', '\x6', '\x2', '\x2', '.', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x34', '\x5', '\b', '\x5', '\x2', '\x30', '\x31', '\a', '\a', 
		'\x2', '\x2', '\x31', '\x33', '\x5', '\b', '\x5', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x11', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x15', '#', '\x34',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
